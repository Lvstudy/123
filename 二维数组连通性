#include<iostream>
#include<fstream>
using namespace std;
# define N 100
int zuida(long long int n, long long int a[], long long int *p, long long int *q)//一维数组的最大子数组和
{
	long long int b[N] = { 0 };
	long long int i, sum1 = 0, max1 = 0;
	for (i = 0; i<n; i++)
	{
		if (sum1<0)
		{
			sum1 = a[i];
		}
		else
		{
			sum1 = sum1 + a[i];
		}
		b[i] = sum1;
	}
	max1 = b[0];
	for (i = 0; i<n; i++)
	{
		if (max1<b[i])
		{
			max1 = b[i];
			*q = i;  //记录最大子数组的终点位置
		}
	}
	for (i = *q; i >= 0; i--)
	{
		if (b[i] == a[i])
		{
			*p = i;//记录最大子数组的起点
			break;
		}
	}
	return max1;
}
int main()
{
	long long int m1, m2, i, j, p, q, t2;
	long long int sum, max;
	long long int left[N], right[N], t[N];
	long long int a[N][N], b[N];
	ifstream fin("sz.txt");
	ifstream fin1("sz1.txt");
	fin1 >> m1 >> m2;
	cout << "二维数组的行和列为"<< endl;
	cout << m1 << "  " << m2 << endl;
	for (int i = 0; i < m1; i++)
	for (int j = 0; j < m2; j++)
	{
		fin >> a[i][j];
	}
	cout << "TXT文件中的二维数组为" << endl;
	for (int i = 0; i < m1; i++)
	{
		for (int j = 0; j < m2; j++)
		{
			cout << a[i][j] << " ";
		}
		cout << endl;
	}
	for (i = 0; i<m1; i++)//求每一行最大子数组
	{
		for (j = 0; j<m2; j++)
		{
			b[j] = a[i][j];
		}
		sum = zuida(m1, b, &p, &q);
		left[i] = p;     //记录最大子数组的坐标位置
		right[i] = q;
		t[i] = sum;

	}
	t2 = t[0];
	for (i = 0; i + 1<m2; i++)//将最大子数组合并
	{
		if (left[i] <= right[i + 1] && right[i] >= left[i + 1])//两行的最大子数组块相连
		{
			t2 += t[i + 1];
		}
		for (j = left[i]; j<left[i + 1]; j++)
		{
			if (a[i + 1][j]>0)
				t2 += a[i + 1][j];                   //判别独立正数
		}

	}
	cout <<"最大子数组和为："<< t2 << endl;
	return 0;
}


